import streamlit as st
from collections import Counter
from models import FAQ
from config import STATUS_ICONS, MESSAGES, APP_CONFIG
from utils import initial_page_config, initialize_session_state
from datetime import datetime

# ÂàùÂßãÂåñÈ°µÈù¢
#initial_page_config("faq")

# Ëé∑ÂèñÂΩìÂâçËØ≠Ë®Ä
lang = st.session_state.get("language", "zh-CN")

# ÁºìÂ≠òÁ§∫‰æãÊï∞ÊçÆ
@st.cache_data
def load_faqs():
    return [
        FAQ(similarity=95, question="HDIÊùøÂ±ÇÂéãÂ∑•Ëâ∫‰∏≠ÔºåÂ¶Ç‰Ωï‰ºòÂåñÂéãÂêàÊ∏©Â∫¶Êõ≤Á∫ø‰ª•ÊèêÈ´ò‰∫ßÂìÅËâØÁéáÔºü", date="2024-01-15", customer="Siedle", status="Closed", stg="STG-1001", image="images/starteam-logo.png", questions="Q-1001"),
        FAQ(similarity=88, question="È´òÈ¢ëPCBÈòªÊäóÊµãËØï‰∏≠Âá∫Áé∞ËæÉÂ§ßÂÅèÂ∑ÆÔºåÂèØËÉΩÁöÑÂéüÂõ†ÂèäËß£ÂÜ≥ÊñπÊ°àÔºü", date="2024-01-15", customer="Deltec", status="Pending", stg="STG-2001", image=["images/starteam-logo.png", "images/starteam-logo.png"], questions="Q-1001"),
        FAQ(similarity=82, question="Â§öÂ±ÇÊùøÈíªÂ≠îÂêéÂá∫Áé∞ÊØõÂà∫ÔºåÂ¶Ç‰ΩïË∞ÉÊï¥Â∑•Ëâ∫ÂèÇÊï∞Ôºü", date="2024-01-14", customer="ifm", status="Pending", stg="STG-3002", image=None, questions="Q-1001"),
        FAQ(similarity=80, question="Â±ÇÂéãÂêéÂá∫Áé∞ÈºìÂåÖÁöÑÂéüÂõ†ÂàÜÊûêÔºü", date="2024-01-14", customer="Others", status="Closed", stg="STG-4003", image="images/starteam-logo.png", questions="Q-1001"),
        FAQ(similarity=90, question="Ê≤âÈáëÂ∑•Ëâ∫‰∏≠Âá∫Áé∞È¢úËâ≤‰∏çÂùáÂåÄÁöÑÈóÆÈ¢òÔºåÂ¶Ç‰Ωï‰ºòÂåñÔºü", date="2024-01-13", customer="Pilz", status="Reviewing", stg="STG-5004", image=["images/starteam-logo.png", "images/starteam-logo.png", "images/starteam-logo.png"], questions="Q-1001"),
    ]

faqs = load_faqs()

# ÂàùÂßãÂåñ session state
initialize_session_state({"selected_customer": "All Customers"})

# ‰∏§ÂàóÂ∏ÉÂ±Ä
col1, col2 = st.columns([1, 3])

# Â∑¶‰æßÂàóÔºöÂÆ¢Êà∑Á≠õÈÄâ
with col1:
    st.header("ÊåâÂÆ¢Êà∑Á≠õÈÄâ")
    customer_counts = Counter([faq.customer for faq in faqs])
    top_customers = customer_counts.most_common(5)
    unique_customers = list(set([faq.customer for faq in faqs]))

    selected_customer = st.selectbox(
        "ÈÄâÊã©ÂÆ¢Êà∑", 
        ["All Customers"] + unique_customers, 
        index=0 if st.session_state.selected_customer == "All Customers" else unique_customers.index(st.session_state.selected_customer) + 1,
        key="customer_select"
    )
    
    if selected_customer != st.session_state.selected_customer:
        st.session_state.selected_customer = selected_customer
        st.rerun()

    for customer, count in top_customers:
        if st.button(f"{customer} ({count})", key=f"btn_{customer}"):
            st.session_state.selected_customer = customer
            st.rerun()

# Âè≥‰æßÂàóÔºöFAQ ÂÜÖÂÆπ
with col2:
    # ‰ΩøÁî® MESSAGES ‰∏≠ÁöÑ faq_titleÔºåËã•‰∏çÂ≠òÂú®ÂàôÂõûÈÄÄÂà∞ APP_CONFIG
    title = MESSAGES[lang].get("faq_title", APP_CONFIG["pages"]["faq"]["title"])
    st.title(title)

    # ËøáÊª§Ê†è
    filter_col1, filter_col2, filter_col3, filter_col4, filter_col5 = st.columns([2, 2, 2, 2, 2])
    with filter_col1:
        keyword = st.text_input("ÂÖ≥ÈîÆËØç", key="keyword")
    with filter_col2:
        start_date = st.date_input("ÂºÄÂßãÊó•Êúü", value=None, key="start_date")
    with filter_col3:
        end_date = st.date_input("ÁªìÊùüÊó•Êúü", value=None, key="end_date")
    with filter_col4:
        status = st.selectbox("Áä∂ÊÄÅ", ["All Statuses", "Closed", "Pending", "Reviewing"], key="status")
    with filter_col5:
        stg_pn = st.text_input("STG P/N", key="stg_pn")
    
    search_button = st.button("üîç ÊêúÁ¥¢", key="search_button")

    # Á≠õÈÄâ FAQ
    filtered_faqs = faqs
    if st.session_state.selected_customer != "All Customers":
        filtered_faqs = [faq for faq in filtered_faqs if faq.customer == st.session_state.selected_customer]
    if keyword:
        filtered_faqs = [faq for faq in filtered_faqs if keyword.lower() in faq.question.lower()]
    if start_date:
        filtered_faqs = [faq for faq in filtered_faqs if datetime.strptime(faq.date, "%Y-%m-%d").date() >= start_date]
    if end_date:
        filtered_faqs = [faq for faq in filtered_faqs if datetime.strptime(faq.date, "%Y-%m-%d").date() <= end_date]
    if status != "All Statuses":
        filtered_faqs = [faq for faq in filtered_faqs if faq.status == status]
    if stg_pn:
        filtered_faqs = [faq for faq in filtered_faqs if stg_pn.lower() in faq.stg.lower()]

    # Âª∂ËøüÂä†ËΩΩ FAQ ÂÜÖÂÆπ
    with st.container():
        if filtered_faqs:
            for faq in filtered_faqs:
                with st.expander(f"{faq.question} - Áõ∏‰ººÂ∫¶: {faq.similarity}%"):
                    st.markdown(f"""
                        <div class="faq-card">
                            <div class="details">
                                <span>{faq.date}</span> | 
                                <span>ÂÆ¢Êà∑Ôºö{faq.customer}</span> | 
                                <span>Áä∂ÊÄÅÔºö{faq.status} {STATUS_ICONS[faq.status]}</span> | 
                                <span>STG P/NÔºö{faq.stg}</span>
                            </div>
                            <div class="details">{faq.questions}</div>
                        </div>
                    """, unsafe_allow_html=True)
                    
                    if faq.image:
                        if isinstance(faq.image, list):
                            for img in faq.image:
                                st.image(img, caption="FAQ Image")
                        else:
                            st.image(faq.image, caption="FAQ Image")
        else:
            st.write(MESSAGES[lang]["noDataFound"])